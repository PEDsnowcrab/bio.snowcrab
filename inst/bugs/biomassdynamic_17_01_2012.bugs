model {
  # -------------------  
  # hyperpriors of precision terms 
  # for lognormal precisions, target sd is obtained from:
  # cv = sqrt(exp(sd^2) - 1) or,
  # sd = sqrt(log(cv^2 + 1))
  # curve( dnorm(x, mean=1, sd=1*0.5), from=0.1, to=4  )
  # curve( dlnorm(x, meanlog=log(1), sdlog=1),  from=log(0.1), to=log(10)  )
  # curve( dbeta(x, 10, 10),  from=0.01, to=1  )
  
    for (j in 1:R) {
      r[j] ~ dunif( eps, r0x[j] )
      q[j] ~ dunif( eps, q0x[j] )
      K[j] ~ dunif( eps, K0x[j] )
      b0[j] ~ dunif( eps, b0x[j])  # b0x is max
     
      sd.r[j] ~ dunif( eps, r0x[j] * cv * 2 )  
      sd.q[j] ~ dunif( eps, q0x[j] * cv * 2 ) 
      sd.K[j] ~ dunif( eps, K0x[j] * cv * 2 ) 
      sd.b0[j]~ dunif( eps, b0x[j] * cv * 2 )  # E(b0) = 0.2 to 0.8
    }
  
  # using observed abundance index CV's -- these are already on the log scale 
    for (j in 1:R) {
      sd.pq[j] ~  dunif( eps, 1 * cv ) # E(X) = 0.5
      q.sdB[j] ~  dunif( eps, 2 ) # assume E(q.sdB) < 1  ~0.5 gives cv of 20%; CV of 'biomass'
      for (i in 1:N) {
        sd.p[i,j] ~ dnorm( IOAcv[i,j] * q.sdB[j], pow( cv*sd.pq[j],-2) ) T(eps, 2) # q.sdB quotient for adjusting scale of SD -- lognormal SD
      }
      for(i in (N+1):(N+M)) {
        sd.p[i,j] ~ dnorm( mean(sd.p[1:N,j]), pow( cv*sd.pq[j],-2) ) T(eps, 2) # q.sdB quotient for adjusting scale of SD
      }
    }

 
  # -------------------  
  # catch observation model, standardized to K
#    for (j in 1:R) {
#      sd.C[j] ~ dunif( eps, 1 ) # historically, E(catch) ~ 20-60% 
#      for (i in 1:N){
#        catch[i,j] ~ dnorm( CAT[i,j] / K[j] , pow( sd.C[j], -2 ) ) T(0.05, 0.95) ;
#        catch[i,j] <- CAT[i,j]/K[j]
#    }}



  # -------------------  
  # total removals due to fishing, standardized to K: fishing + unaccounted catches  +  handling mortality, etc
    for (j in 1:R) {
      for (i in 1:N){
        ua[i,j] ~ dbeta( 3, 10 )  # unaccounted removals and handling mortality, proportional to total catch, modal with peak near 0.2
        sd.rem[i,j] ~ dunif( eps, 1 ) # E(rem)= 25% of landings  
        rem[i,j] ~ dnorm( CAT[i,j] / K[j] * (1+ua[i,j]), pow( sd.rem[i,j], -2 ) ) T(eps,1); # biomass should be from i-1 but i is used as it is only an approximate scaling factor
    }}



  # -------------------  
  # biomass observation model 
  #   require a fall / spring surveys correction
  #   want B to represent the total biomass available in fishing year y
  #   when surveys are conducted in fall, Btot(t) = Bsurvey(t) + rem(t) 
  #   when surveys are conducted in spring, Btot(t) = Bsurvey(t) + rem(t-1) 
  #   |...(t-2)...|.Ss..(t-1)...|...(t=2004)..Sf.|...(t+1).Sf..|...(t+2)..Sf.|...
  #   corrections for spring surveys in 2003 and earlier for north and south 
  #   assume BT = total biomass = rem(t-1) + biomass estimate(t; BE) 
      
    for (j in 1:R) {
      for (i in 1:N) {
        sd.o[i,j] ~ dunif( eps, 2 )  # lognormal error 0 to 2 is appropriate
      } 
    }


    for (j in 1:(R-1)) {
      # spring surveys from 1998 to 2003
      IOA[1,j] ~ dlnorm( log( max( q[j] * K[j] * (biomass[1,j] - rem[1,j]) , eps)), pow( sd.o[1,j] , -2 ) ) ;  # approximation
      for (i in 2:(ty-1)) { 
        IOA[i,j] ~ dlnorm( log( max( q[j] * K[j] * (biomass[i,j]- rem[(i-1),j]), eps)), pow( sd.o[i,j] , -2 ) ) ;
      }
      # transition year
      IOA[ty,j] ~ dlnorm( log( max( q[j] * K[j] * (biomass[ty,j] - (rem[(ty-1),j] + rem[ty,j] )/2 ), eps)), pow( sd.o[ty,j] , -2 ) ) ;  # approximation
      # fall surveys    
      for (i in (ty+1):N) {
        IOA[i,j] ~ dlnorm( log( max( q[j] * K[j] * (biomass[i,j]- rem[i,j]), eps)), pow( sd.o[i,j] , -2 ) )  ;
      }
    }

    # Cfa 4X -- assume total biomass = rem(t-1) + biomass estimate(t)
    # ie, similar to a spring fishery
    IOA[1,cfa4x] ~ dlnorm( log( max( q[cfa4x] * K[cfa4x] * (biomass[1,cfa4x] - rem[1,cfa4x]), eps)), pow( sd.o[1,cfa4x] , -2 ) )  ;  # approximation
    for (i in 2:N) { 
      IOA[i,cfa4x] ~ dlnorm( log( max( q[cfa4x] * K[cfa4x] * (biomass[i,cfa4x] - rem[(i-1),cfa4x]), eps)), pow( sd.o[i,cfa4x] , -2 ) )  ;
    }


  # -------------------  
  # biomass process model 
    for(j in 1:R) {
      biomass[1,j] ~ dlnorm( log( b0[j]), pow( sd.b0[j], -2 ) )  # T(0,2) ; # biomass at first year 
      for(i in 2:N) {
        biomass[i,j] ~ dlnorm( log( max(biomass[i-1,j]*( 1 + r[j]*(1-biomass[i-1,j])) - rem[i-1,j] , eps)), pow( sd.p[i,j] , -2 ) ) # T(, 2) ; 
    }}


  # -------------------  
  # forecasts
    for(j in 1:R) {
    for(i in (N+1):(N+M)) {
      biomass[i,j] ~ dlnorm( log( max(biomass[i-1,j]* (1 + r[j]*(1-biomass[i-1,j])) - er * biomass[i-1,j], eps)), pow( sd.p[i,j], -2 ) ) # T(, 2) ; 
    }}


  # -------------------  
  # monitoring nodes and parameter estimates for output
    for(j in 1:R) {
      Bdrop[j]  <- 1 - step( biomass[N+1,j]-biomass[N,j] ) ; # test if biomass(t) >= biomass(t-1) 
      BXMSY[j]  <- 1 - step( biomass[N+1,j]-0.5 ) ; # test if biomass >= BMSY
      BX2MSY[j] <- 1 - step( biomass[N+1,j]-0.25 ) ; # test if biomass >= 1/2 BMSY
      MSY[j]    <- r[j] * K[j] / 4  # maximum height of of the latent productivity (yield)
      BMSY[j]   <- K[j]/2  # biomass at MSY
      FMSY[j]   <- 2 * MSY[j] / K[j] # fishing mortality at MSY
      Fcrash[j] <- 4 * MSY[j] / K[j] # fishing mortality at which the stock will crash
    }


    # -------------------  
    # fishing mortality
    # force first year estimate assuming rem in year 0 to be similar to year 1 
    for(j in 1:R) {
      for(i in 1:N) {
        F[i,j] <- -log( max(1 - rem[i,j] / biomass[i,j], eps))  
      }
      for(i in (N+1):(N+M)) {
        F[i,j] <- -log( max(1 - (er + mean(ua[1:N,j]) ) * biomass[i-1,j] / biomass[i,j], eps)) 
      }
    }


    # -------------------  
    # annual production
    for(j in 1:R) {
      p[1,j] <- biomass[2,j]- biomass[1,j] + rem[1,j] # approximation
      for (i in 2:(N) ){
        p[i,j] <- (biomass[i+1,j]- biomass[i-1,j])/2 + rem[i,j]  # linear interpolation cancels out the biomass[i,j] term
      }
      for(i in (N+1):(N+M-1)) {
        p[i,j] <- (biomass[i+1,j]- biomass[i-1,j])/2 + er * biomass[i-1,j]   # linear interpolation cancels out the biomass[i,j] term
      }
      p[(N+M),j] <- (biomass[(N+M),j]- biomass[(N+M-1),j]) + er * biomass[(N+M-1),j]   # approximation
    }
   

    # -------------------  
    # recaled estimates
    for(j in 1:R) {
    for(i in 1:M) {
      TAC[i,j] <- er*biomass[N+i-1,j]*K[j]
      rem[N+i,j] <- TAC[i,j] * (1+mean(ua[1:N,j])) / K[j]
    }}
 
    for(j in 1:R) {
    for(i in 1:(N+M)) {
      B[i,j] <- biomass[i,j]*K[j]
      C[i,j] <- rem[i,j]*K[j]
      P[i,j] <- p[i,j]*K[j]
    }}

}
